# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'ru'
    router.request_context.host: 'todo.localhost'
    # Directory where we upload file
    uploads_dir_name: 'uploads'
    # Site base URL
    site_base_url: '%env(SITE_BASE_URL)%'
    # The base URL to the uploaded assets
    uploads_base_url: '%site_base_url%/%uploads_dir_name%'
    # UI host
    ui_host: '%env(UI_HOST)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            Symfony\Component\Mime\MimeTypesInterface: '@mime_types'
            League\Flysystem\FilesystemInterface: '@oneup_flysystem.public_uploads_filesystem_filesystem'
            Symfony\Component\Asset\Context\RequestStackContext: '@assets.context'
            # Define variable $uploadedAssetsBaseUrl
            $uploadedAssetsBaseUrl: '%uploads_base_url%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    App\Domain\Service\Menu\SidebarMenu:
        arguments: [ "@knp_menu.factory" ]
        tags:
            - { name: knp_menu.menu_builder, method: build, alias: sidebar_menu }

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Http\Controller\:
        resource: '../src/Http/Controller/'
        tags: ['controller.service_arguments']

    # Fix schema listener
    App\Infrastructure\DataBase\EventListener\FixPostgreSQLDefaultSchemaListener:
        tags:
            - { name: doctrine.event_listener, event: postGenerateSchema }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Domain\Auth\User\Service\ResetTokenizer:
        factory: 'App\Infrastructure\Container\Domain\Auth\ResetTokenizerFactory:create'
        arguments: ['PT1H']

    acme_api.event.jwt_created_listener:
        class: App\Infrastructure\Security\Event\JWTCreatedListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    App\Http\Service\JsonApi\JsonApiExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\Infrastructure\Email\AppTemplateCreator:
        arguments: ['%env(MAILER_FROM_EMAIL)%']

    Predis\Client:
        arguments:
            - '%env(REDIS_URL)%'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Predis\Client'

    App\Infrastructure\Security\RolesHelper:
        arguments: [ '%security.role_hierarchy.roles%' ]

    App\Widget\:
        resource: '../src/Widget'
        tags:
            - 'twig.extension'
